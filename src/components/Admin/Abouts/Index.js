import React from 'react';
import FormInsert from './FormInsert';
import FormTable from './FormTable';

export default class Index extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            listAbout: [
                {
                    id : '1',
                    name : 'Tr√† s·ªØa Tr·∫ßn ƒê·ª©c Bo',
                    content : 'TƒêB Milktea l√† th∆∞∆°ng hi·ªáu c·ªßa ng∆∞·ªùi Vi·ªát mang h∆∞∆°ng v·ªã v√† d·∫•u ·∫•n ƒë∆°n gi·∫£n, g·∫ßn g≈©i v·ªõi ng∆∞·ªùi Vi·ªát. Kh√¥ng c·∫ßu k√¨ nh∆∞ng tinh t·∫ø l√† phong c√°ch ·∫©m th·ª±c l·∫´n phong c√°ch ph·ª•c v·ª• c·ªßa BandB nh·∫±m mang l·∫°i c·∫£m x√∫c tho·∫£i m√°i nh·∫•t, tuy·ªát v·ªùi nh·∫•t cho ng∆∞·ªùi tr·∫£i nghi·ªám. B·ªüi v√¨ TƒêB Milktea sinh ra v·ªõi s·ª© m·ªánh ‚ÄúTr·ªçn v·∫πn c·∫£m x√∫c Vi·ªát‚Äù üçÄƒê·ªëi v·ªõi TƒêB Milktea kh√°ch',
                    active : true,
                    image : '/asset/web/images/cocsu.jpg'
                }
            ], // Kh·ªüi t·∫°o m·∫£ng ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch element
            isHidden: false, //Ki·ªÉm tra ƒë√≥ng (false) / m·ªü (true) form Insert.
            elementEdit: [], // D√ông ƒë·ªÉ l∆∞u tr·ªØ elm edit
            fiter: { //L·ªçc d·ªØ li·ªáu t√¨m ki·∫øm theo t√™n
                name: ''
            }
        }
    }
    //Load l·∫ßn ƒë·∫ßu -> l·∫•y data t·ª´ d∆∞·ªõi localStorage
    componentWillMount() {
        if (localStorage && localStorage.getItem('listAbout')) {
            var listAbout = JSON.parse(localStorage.getItem('listAbout'));
            this.setState({
                listAbout: listAbout
            });
        }else{
            var {listAbout} = this.state;
            localStorage.setItem('listAbout',JSON.stringify(listAbout));
        }
    }
    //M·ªü form Insert
    onOpenInsertForm = () => {
        this.setState({
            isHidden: !this.state.isHidden,
            elementEdit: null
        });
    }
    //ƒê√≥ng form Insert
    onCloseForm = () => {
        this.setState({
            isHidden: false,
            elementEdit: null
        });
    }
    //L·∫•y data t·ª´ form Insert
    onSubmit = (data) => {
        var { listAbout } = this.state;
        if (data.id === '') {
            data.id = this.randomId();
            data.image = '/asset/web/images/cocsu.jpg';
            listAbout.push(data);
        } else {
            var index = this.findIndex(data.id);
            data.image = '/asset/web/images/cocsu.jpg';
            listAbout[index] = data;
        }
        this.setState({
            listAbout: listAbout,
            isHidden: false,

        });
        //L∆∞u v√†o localStorage
        localStorage.setItem('listAbout', JSON.stringify(listAbout));
    }
    //T·∫°o c√°c ph∆∞∆°ng th·ª©c random Id:
    //Random string
    randomString() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }
    //Random Id
    randomId() {
        return this.randomString() + '-' + this.randomString() + this.randomString() + '-' + this.randomString();
    }
    //Ch·ª©c nƒÉng Delete
    onDelete = (id) => {
        var { listAbout } = this.state;
        var index = this.findIndex(id);
        if (index != -1) {
            listAbout.splice(index, 1);
            this.setState({
                listAbout: listAbout
            });
            localStorage.setItem('listAbout', JSON.stringify(listAbout));
        }
    }
    onUpdate = (id) => {
        var { listAbout } = this.state;
        var index = this.findIndex(id);
        var elementEdit = listAbout[index];
        if (index != -1) {
            this.setState({
                elementEdit: elementEdit
            });
        }
        //M·ªü form Insert <=> Update
        this.setState({
            isHidden: true
        });
    }
    onUpdateActive = (id) => {
        var { listAbout } = this.state;
        var index = this.findIndex(id);
        if (index !== -1) {
            listAbout[index].active = !listAbout[index].active
            this.setState({
                listAbout: listAbout
            });
            localStorage.setItem('listAbout', JSON.stringify(listAbout));
        }
    }
    //T√¨m ki·∫øm
    findIndex = (id) => {
        var { listAbout } = this.state;
        var result = -1;
        listAbout.forEach((item, index) => {
            if (item.id === id) {
                result = index;
            }
        });
        return result
    }
    render() {
        var { listAbout, isHidden, elementEdit, fiter } = this.state;

        var hiddenFormInsert = isHidden ? <FormInsert
            onSubmit={this.onSubmit}
            elementEdit={elementEdit}
            onCloseForm={this.onCloseForm}
        /> : '';

        if (fiter) {
            if (fiter.name) {
                listAbout = listAbout.filter((item) => {
                    return item.name.toLowerCase().indexOf(fiter.name) !== -1;
                });
            }
        }
        return (
            <div className="row">
                <div className="col-xs-12" style={{ width: '100%' }}>
                    <div className="card">
                        <div className="card-header">
                            <h3 className="card-title text-primary " style={{ fontSize: '30px' }}><i className="fas fa-align-justify" /> <b>gi∆°ÃÅi thi√™Ã£u</b></h3>
                        </div>
                        <button type="button" className="col-1 btn btn-primary" onClick={this.onOpenInsertForm}>
                            <span className="fa fa-plus"></span>Th√™m
                        </button>
                        <div className="card-body">
                            <div className="row">
                                <div className="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                    {/* Form Th√™m  */}
                                    {hiddenFormInsert}
                                </div>
                            </div>
                            {/* Form Table */}
                            <FormTable
                                listAbout={listAbout}
                                onDelete={this.onDelete}
                                onUpdate={this.onUpdate}
                                onFiter={this.onFiter} 
                                onUpdateActive = {this.onUpdateActive}
                                />
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}